---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  labels:
    app: {{ template "ada-stake-pool.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "ada-stake-pool.fullname" . }}-producer
spec:
  replicas: {{ default 2 .Values.producer.replicas }}
  selector:
    matchLabels:
      app: {{ template "ada-stake-pool.fullname" . }}
      release: "{{ .Release.Name }}"
      component: producer
  serviceName: {{ template "ada-stake-pool.fullname" . }}-producer
  template:
    metadata:
      labels:
        app: {{ template "ada-stake-pool.fullname" . }}
        release: "{{ .Release.Name }}"
        component: producer
    spec:
      serviceAccountName: producer
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      containers:
        - name: producer
          image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          env:
            - name: NODE_NAME
              value: producer
            - name: NODE_TOPOLOGY
              value: "relaynode.{{ .Release.Namespace }}.svc.cluster.local:3000/1"
            - name: CREATE_STAKEPOOL
              value: "True"         
            - name: METADATA_URL
              value: https://gist.github.com/funkypenguin/42bb71557a84b79c8ed04ba7c65adf09     
            - name: HOST_ADDR
              value: '0.0.0.0'           
          args: 
            - "--start"
          # - "--staking"
          resources:
{{ toYaml .Values.producer.resources | indent 12 }}
          ports:
            - containerPort: 3000
              protocol: "TCP"
              name: "cardano-node"
          volumeMounts:
            - name: "data"
              readOnly: false
              mountPath: "/config/mainnet-producer"
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is
            ## listening on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "__CONTAINER_PORT_NAME__"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet:
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "__CONTAINER_PORT_NAME__"
              ##
              ## Whether to connect using the "HTTP" or "HTTPS" protocol (i.e. whether to enscapsulate the connection in
              ## TLS.
              ##
              # scheme: "HTTP"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              ## How long to wait between probes
              ##
              # periodSeconds: 10
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      ## Whether to restart this pod. Possible values are:
      ## - Always (Sensible Default)
      ## - OnFailure
      ## - Never
      ##
      ## For more information, see http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: "Always"
      securityContext:
        ## Volumes which support ownership management are modified to be owned and writable by the GID specified in
        ## fsGroup. See the Ownership Management design document for more details.
        ## See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/
        ##      volume-ownership-management.md
        fsGroup: 65534
        ## A list of groups applied to the first process run in each container, in addition to the containerâ€™s primary
        ## GID. If unspecified, no groups will be added to any container.
        # supplementalGroups: [1000]
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: "{{ template "ada-stake-pool.name" . }}"
          component: "producer"
          release: {{ .Release.Name | quote }}
          heritage: {{ .Release.Service | quote }}
      spec:
        accessModes:
        {{- range .Values.producer.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}      
        resources:
          requests:
            storage: {{ .Values.producer.persistence.size | quote }}